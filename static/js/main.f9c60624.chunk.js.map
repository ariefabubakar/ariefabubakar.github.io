{"version":3,"sources":["logo.svg","config.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","config","apiKey","authDomain","databaseURL","App","props","handleChange","event","console","log","state","setState","positionId","target","value","writeUserData","Firebase","database","ref","set","db","getUserData","on","snapshot","val","decreaseCount","vehicle","increaseCount","vehicleType","vehicleTypeId","createdDateTime","Date","toString","vehicles","positions","vehicleTypes","length","push","positionIndex","findIndex","data","vehicleTypesByPosition","vehicleCounts","vehicleTypeIndex","counts","initializeApp","this","prevProps","prevState","filter","Fragment","className","onChange","map","position","key","style","display","getVehicleType","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f9c60624.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const config = {\n    apiKey: \"GuVCXUOwHk7UK5vTjTwDqZUnACnmkbYVDeExSk0L\",\n    authDomain: \"itms-32aad.firebaseapp.com\",\n    databaseURL: \"https://itms-32aad.firebaseio.com\"\n  };\n  \nexport default config;\n  ","import React from 'react';\nimport Firebase from \"firebase\";\nimport logo from './logo.svg';\nimport './App.css';\n\n\nimport config from \"./config\";\nimport { width } from 'window-size';\nimport { red } from 'ansi-colors';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    Firebase.initializeApp(config);\n\n    this.state = {\n      positionId: 0,\n      db: {\n        positions: [],\n        vehicleTypes: [],\n        vehicles: []\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.getUserData();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState !== this.state.db) {\n      this.writeUserData();\n    }\n  }\n\n  getVehicleType(vehicleTypeId) {\n    const { vehicleTypes } = this.state.db;\n\n    const vehicleTypeFound = vehicleTypes.filter(data => {\n      return data.vehicleTypeId === vehicleTypeId;\n    });\n\n    return vehicleTypeFound[0].vehicleType;\n  }\n\n  handleChange = (event) => {\n    console.log(this.state);\n    this.setState({ positionId: event.target.value });\n  };\n\n  writeUserData = () => {\n    Firebase.database()\n      .ref(\"/\")\n      .set(this.state.db);\n    console.log(\"DATA SAVED\");\n  };\n\n  getUserData = () => {\n    let ref = Firebase.database().ref(\"/\");\n    ref.on(\"value\", snapshot => {\n      const state = snapshot.val();\n      this.setState({ db: state});\n    });\n  };\n  \n  decreaseCount = vehicle => {\n\n  };\n\n  increaseCount = vehicleType => {\n    let vehicleTypeId = vehicleType.vehicleTypeId;\n    let positionId = this.state.positionId;\n    let createdDateTime = new Date().toString();\n\n    const { vehicles, positions, vehicleTypes } = this.state.db;\n\n    console.log(vehicles.length);\n\n    vehicles.push({vehicleTypeId, positionId, createdDateTime});\n\n    const positionIndex = positions.findIndex(data => {\n      return data.positionId == this.state.positionId;\n    });\n\n    const vehicleTypesByPosition = positions[positionIndex].vehicleCounts;\n\n    const vehicleTypeIndex = vehicleTypesByPosition.findIndex(data => {\n      return data.vehicleTypeId == vehicleTypeId;\n    });\n\n    vehicleTypesByPosition[vehicleTypeIndex].counts++;\n\n    this.setState({ db: { positions, vehicleTypes, vehicles } });\n  };\n\n  render() {\n    const { positions } = this.state.db;\n\n    if(positions.length == 0)\n    {\n      return \"\";\n    }\n\n    if(this.state.positionId == 0)\n    {\n      this.setState({ positionId: positions[0].positionId});\n    }\n\n    const positionIndex = positions.findIndex(data => {\n      return data.positionId == this.state.positionId;\n    });\n\n    let vehicleTypesByPosition = [];\n    console.log(positionIndex);\n    if(this.state.positionId != 0)\n    {\n      vehicleTypesByPosition = positions[positionIndex].vehicleCounts\n    }\n\n    return (\n      <React.Fragment>\n        <div className=\"container\">\n          <div className=\"row py-3\">\n            <div className=\"col text-right\">\n              Position: \n            </div>\n            <div className=\"col\">\n              <select onChange={this.handleChange}>\n                {positions.map(position => (\n                <option value={position.positionId}>{position.positionId}</option>\n                ))}\n              </select>\n            </div>\n          </div>\n          {vehicleTypesByPosition.map(vehicleType => (\n          <div className=\"row\">\n            <div className=\"col\">\n              <div\n                key={vehicleType.vehicleTypeId}\n                className=\"card\">\n                <div className=\"card-body\">\n                  <div className=\"row\">\n                    <div className=\"col text-left\">\n                      <h1 style={{display: 'inline-block'}}>{this.getVehicleType(vehicleType.vehicleTypeId)} ({vehicleType.counts})</h1>\n                    </div>\n                    <div className=\"col-md-auto text-right\" >\n                      <button\n                        onClick={() => this.increaseCount(vehicleType)}\n                        className=\"btn btn-primary\"\n                        style={{display: 'inline-block'}}\n                      >\n                        +\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          ))}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}